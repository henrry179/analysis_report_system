name: Enhanced CI/CD Pipeline - 业务分析报告自动化系统

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  schedule:
    # 每天凌晨2点运行夜间构建
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # 代码质量和安全检查
  code-quality:
    name: 🔍 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史用于更好的分析

    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 安装代码质量工具
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
        pip install -r requirements.txt

    - name: 🎨 代码格式检查 (Black)
      run: |
        black --check --diff src/ tests/

    - name: 📝 导入排序检查 (isort)
      run: |
        isort --check-only --diff src/ tests/

    - name: 🔍 代码风格检查 (flake8)
      run: |
        flake8 src/ tests/ --count --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: 📊 类型检查 (mypy)
      run: |
        mypy src/ --ignore-missing-imports --show-error-codes

    - name: 🔒 安全检查 (bandit)
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ -f txt

    - name: 🛡️ 依赖安全检查 (safety)
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: 📊 上传代码质量报告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-quality-reports
        path: |
          bandit-report.json
          safety-report.json

  # 多环境测试矩阵
  test-matrix:
    name: 🧪 测试矩阵 (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # 排除一些组合以节省资源
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.9'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🐍 设置Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-docker.txt
        pip install pytest-xdist pytest-mock pytest-cov pytest-html pytest-json-report

    - name: 🧪 运行测试套件
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-${{ matrix.python-version }}
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/ \
          -v \
          --tb=short \
          --maxfail=10 \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --html=pytest-report.html \
          --json-report --json-report-file=pytest-report.json \
          -n auto

    - name: 📊 上传测试覆盖率
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests,${{ matrix.os }},${{ matrix.python-version }}
        name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}

    - name: 📋 上传测试报告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          pytest-report.html
          pytest-report.json
          htmlcov/

  # 集成测试
  integration-tests:
    name: 🔗 集成测试
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-docker.txt
        pip install pytest-xdist pytest-mock pytest-cov

    - name: 🏗️ 构建测试环境
      run: |
        docker-compose -f docker-compose.dev.yml up -d --build
        sleep 30  # 等待服务启动

    - name: 🧪 运行集成测试
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-integration
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/integration/ -v --tb=short -m integration

    - name: 🧪 API端到端测试
      run: |
        # 等待应用启动
        timeout 60 bash -c 'until curl -f http://localhost:8000/api/info; do sleep 2; done'
        
        # 运行API测试
        pytest tests/api/ -v --tb=short -m api

    - name: 📊 性能基准测试
      run: |
        pytest tests/ -v -m benchmark --benchmark-only

    - name: 🧹 清理测试环境
      if: always()
      run: |
        docker-compose -f docker-compose.dev.yml down -v

  # 端到端测试
  e2e-tests:
    name: 🌐 端到端测试
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🎭 设置Playwright
      uses: microsoft/playwright-action@v1

    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 安装Playwright依赖
      run: |
        pip install playwright pytest-playwright
        playwright install

    - name: 🏗️ 启动应用
      run: |
        docker-compose up -d
        sleep 60  # 等待应用完全启动

    - name: 🧪 运行E2E测试
      run: |
        pytest tests/e2e/ -v --tb=short --browser=chromium --browser=firefox

    - name: 📊 上传E2E测试报告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          test-results/
          playwright-report/

  # 构建和推送Docker镜像
  build-and-push:
    name: 🐳 构建Docker镜像
    runs-on: ubuntu-latest
    needs: [test-matrix, integration-tests]
    if: github.event_name != 'pull_request'
    
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      version: ${{ steps.meta.outputs.version }}

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🔧 设置Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 登录容器注册表
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📝 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ 构建并推送Docker镜像
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          BUILD_VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          BUILD_REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

    - name: 🏷️ 输出镜像信息
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
        echo "version=${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  # 安全扫描
  security-scan:
    name: 🔒 安全扫描
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name != 'pull_request'

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🔍 Trivy漏洞扫描
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.image }}:${{ needs.build-and-push.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 上传Trivy扫描结果
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🔍 Docker Scout扫描
      uses: docker/scout-action@v1
      with:
        command: cves
        image: ${{ needs.build-and-push.outputs.image }}:${{ needs.build-and-push.outputs.version }}
        only-severities: critical,high
        write-comment: false

    - name: 🔒 Snyk安全扫描
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ needs.build-and-push.outputs.image }}:${{ needs.build-and-push.outputs.version }}
        args: --severity-threshold=high
      continue-on-error: true

  # 部署到开发环境
  deploy-dev:
    name: 🚀 部署到开发环境
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: 
      name: development
      url: https://dev.analysis-system.example.com

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🔧 设置kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: 🔐 配置Kubernetes认证
      run: |
        echo "${{ secrets.KUBE_CONFIG_DEV }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: 🚀 部署到开发环境
      run: |
        # 更新镜像标签
        sed -i 's|IMAGE_TAG|${{ needs.build-and-push.outputs.version }}|g' k8s/development/deployment.yaml
        
        # 应用Kubernetes配置
        kubectl apply -f k8s/development/
        
        # 等待部署完成
        kubectl rollout status deployment/analysis-system-dev -n development --timeout=600s

    - name: 🧪 部署后健康检查
      run: |
        # 等待服务就绪
        sleep 30
        
        # 健康检查
        kubectl get pods -n development
        kubectl get services -n development
        
        # API健康检查
        DEV_URL="https://dev.analysis-system.example.com"
        curl -f "$DEV_URL/api/info" || exit 1
        curl -f "$DEV_URL/health" || exit 1

    - name: 📝 更新部署状态
      run: |
        echo "✅ 开发环境部署成功"
        echo "🌍 访问地址: https://dev.analysis-system.example.com"
        echo "📅 部署时间: $(date)"
        echo "🏷️ 镜像版本: ${{ needs.build-and-push.outputs.version }}"

  # 自动化测试（部署后）
  post-deploy-tests:
    name: 🧪 部署后自动化测试
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 安装测试依赖
      run: |
        pip install requests pytest pytest-html

    - name: 🧪 运行烟雾测试
      env:
        TEST_BASE_URL: https://dev.analysis-system.example.com
      run: |
        pytest tests/smoke/ -v --html=smoke-test-report.html

    - name: ⚡ 运行性能测试
      run: |
        # 使用Artillery进行负载测试
        npm install -g artillery@latest
        artillery run tests/performance/load-test.yml --output performance-report.json

    - name: 📊 上传测试报告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: post-deploy-test-reports
        path: |
          smoke-test-report.html
          performance-report.json

  # 部署到生产环境
  deploy-prod:
    name: 🏭 部署到生产环境
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan, e2e-tests]
    if: github.event_name == 'release'
    environment: 
      name: production
      url: https://analysis-system.example.com

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🔧 设置kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: 🔐 配置Kubernetes认证
      run: |
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: 🚀 蓝绿部署到生产环境
      run: |
        # 蓝绿部署脚本
        ./scripts/blue-green-deploy.sh ${{ needs.build-and-push.outputs.version }}

    - name: 🧪 生产环境验证
      run: |
        # 等待部署稳定
        sleep 120
        
        # 健康检查
        PROD_URL="https://analysis-system.example.com"
        curl -f "$PROD_URL/api/info" || exit 1
        curl -f "$PROD_URL/health" || exit 1
        
        # 关键功能验证
        python scripts/prod-validation.py

    - name: 📢 发送部署通知
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          🎉 生产环境部署成功！
          📦 版本: ${{ github.event.release.tag_name }}
          🌍 访问地址: https://analysis-system.example.com
          👨‍💻 部署者: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()

  # 监控和告警
  monitoring:
    name: 📊 监控和告警
    runs-on: ubuntu-latest
    needs: [deploy-prod]
    if: github.event_name == 'release'

    steps:
    - name: 📊 设置Prometheus监控
      run: |
        echo "📊 配置Prometheus监控规则..."
        # kubectl apply -f monitoring/prometheus-rules.yaml

    - name: 🚨 设置告警规则
      run: |
        echo "🚨 配置Alertmanager告警规则..."
        # kubectl apply -f monitoring/alertmanager-config.yaml

    - name: 📈 创建Grafana仪表盘
      run: |
        echo "📈 导入Grafana仪表盘..."
        # 使用Grafana API导入仪表盘

  # 清理和维护
  cleanup:
    name: 🧹 清理和维护
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()

    steps:
    - name: 🧹 清理旧镜像
      run: |
        echo "🧹 清理旧的Docker镜像..."
        # 保留最近10个版本的镜像
        # gh api repos/${{ github.repository }}/packages/container/${{ github.event.repository.name }}/versions

    - name: 📝 更新部署文档
      run: |
        echo "📝 更新部署文档..."
        echo "## 部署记录 - $(date)" >> DEPLOYMENT_LOG.md
        echo "- 版本: ${{ github.sha }}" >> DEPLOYMENT_LOG.md
        echo "- 分支: ${{ github.ref_name }}" >> DEPLOYMENT_LOG.md
        echo "- 部署者: ${{ github.actor }}" >> DEPLOYMENT_LOG.md
        echo "" >> DEPLOYMENT_LOG.md

    - name: 📊 生成部署报告
      run: |
        echo "📊 生成部署报告..."
        # 收集部署统计信息
        # 生成部署成功率报告

  # 夜间构建（定时任务）
  nightly-build:
    name: 🌙 夜间构建
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🧪 运行完整测试套件
      run: |
        echo "🧪 运行夜间测试套件..."
        # 运行更全面的测试，包括长时间运行的测试

    - name: 📊 生成代码质量报告
      run: |
        echo "📊 生成代码质量报告..."
        # 生成详细的代码质量分析报告

    - name: 🔒 安全审计
      run: |
        echo "🔒 运行安全审计..."
        # 运行完整的安全扫描

    - name: 📧 发送夜间构建报告
      run: |
        echo "📧 发送夜间构建报告..."
        # 发送构建结果邮件