name: Code Quality Check - 代码质量检查

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天凌晨2点运行代码质量检查
    - cron: '0 2 * * *'

jobs:
  # 代码质量分析
  quality-analysis:
    name: 📊 代码质量分析
    runs-on: ubuntu-latest

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史用于SonarCloud分析

    - name: 🐍 设置Python环境
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 安装依赖和质量工具
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-docker.txt
        pip install flake8 black isort mypy bandit safety pylint radon

    - name: 🎨 代码格式检查 (Black)
      run: |
        black --check --diff src/ tests/

    - name: 📋 导入排序检查 (isort)
      run: |
        isort --check-only --diff src/ tests/

    - name: 🔍 代码风格检查 (flake8)
      run: |
        flake8 src/ tests/ --statistics --tee --output-file=flake8-report.txt

    - name: 🏗️ 代码复杂度分析 (radon)
      run: |
        radon cc src/ --total-average --show-complexity
        radon mi src/ --show --multi

    - name: 🔒 安全漏洞检查 (bandit)
      run: |
        bandit -r src/ -f json -o bandit-report.json

    - name: 📊 类型检查 (mypy)
      run: |
        mypy src/ --html-report mypy-report --txt-report mypy-txt-report

    - name: 🔐 依赖安全检查 (safety)
      run: |
        safety check --json --output safety-report.json || true

    - name: 📈 代码质量评分 (pylint)
      run: |
        pylint src/ --output-format=json --reports=y > pylint-report.json || true

    - name: 📊 SonarCloud代码分析
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: 📋 上传质量报告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-reports
        path: |
          flake8-report.txt
          bandit-report.json
          mypy-report/
          mypy-txt-report/
          safety-report.json
          pylint-report.json

  # 文档检查
  documentation-check:
    name: 📚 文档质量检查
    runs-on: ubuntu-latest

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🔍 检查README文件
      run: |
        if [ ! -f README.md ]; then
          echo "❌ README.md 文件缺失"
          exit 1
        fi
        echo "✅ README.md 文件存在"

    - name: 📝 检查文档链接
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/mlc_config.json'

    - name: 📊 统计文档覆盖率
      run: |
        echo "📊 文档统计："
        echo "Markdown文件数量: $(find . -name "*.md" | wc -l)"
        echo "Python文件数量: $(find src/ -name "*.py" | wc -l)"
        echo "文档字符数: $(find . -name "*.md" -exec cat {} \; | wc -c)"

  # 依赖检查
  dependency-check:
    name: 📦 依赖安全检查
    runs-on: ubuntu-latest

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🐍 设置Python环境
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'

    - name: 🔍 检查过时依赖
      run: |
        pip install pip-audit
        pip-audit --desc --output pip-audit-report.json --format json

    - name: 📊 依赖许可证检查
      run: |
        pip install pip-licenses
        pip-licenses --format json --output-file licenses-report.json

    - name: 📋 上传依赖报告
      uses: actions/upload-artifact@v3
      with:
        name: dependency-reports
        path: |
          pip-audit-report.json
          licenses-report.json

  # 性能基准测试
  performance-benchmark:
    name: ⚡ 性能基准测试
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🐍 设置Python环境
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 安装依赖
      run: |
        pip install -r requirements-docker.txt
        pip install pytest-benchmark memory-profiler

    - name: ⚡ 运行性能基准测试
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/performance/ --benchmark-json=benchmark-results.json

    - name: 📊 性能回归检查
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: false
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: true

  # 代码覆盖率检查
  coverage-check:
    name: 📈 代码覆盖率检查
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🐍 设置Python环境
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 安装依赖
      run: |
        pip install -r requirements-docker.txt
        pip install coverage pytest-cov

    - name: 🧪 运行测试并收集覆盖率
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        PYTHONPATH: ${{ github.workspace }}
      run: |
        coverage run -m pytest tests/
        coverage report --show-missing
        coverage html
        coverage xml

    - name: 📊 覆盖率注释
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MINIMUM_GREEN: 80
        MINIMUM_ORANGE: 60

    - name: 📋 上传覆盖率报告
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/