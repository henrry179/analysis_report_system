name: CI/CD Pipeline - 业务分析报告自动化系统

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'

jobs:
  # 代码质量检查和测试
  test:
    name: 🧪 测试和质量检查
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🐍 设置Python环境
      uses: actions/setup-python@v6
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-docker.txt
        pip install pytest-xdist pytest-mock coverage

    - name: 🔍 代码风格检查 (flake8)
      run: |
        pip install flake8
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: 🔒 安全检查 (bandit)
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true

    - name: 📊 类型检查 (mypy)
      run: |
        pip install mypy
        mypy src/ --ignore-missing-imports || true

    - name: 🧪 运行单元测试
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        PYTHONPATH: ${{ github.workspace }}
      run: |
        coverage run -m pytest tests/ -v --tb=short --maxfail=5
        coverage report --show-missing
        coverage xml

    - name: 📈 上传测试覆盖率
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: 📋 生成测试报告
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: 测试结果
        path: pytest-results.xml
        reporter: java-junit

  # 构建Docker镜像
  build:
    name: 🐳 构建Docker镜像
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🔧 设置Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 登录容器注册表
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📝 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ 构建并推送Docker镜像
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          BUILD_VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          BUILD_REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

    - name: 🏷️ 输出镜像信息
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
        echo "🐳 镜像构建完成: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"

  # 安全扫描
  security:
    name: 🔒 安全扫描
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🔍 运行Trivy漏洞扫描
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 上传Trivy扫描结果
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 部署到开发环境
  deploy-dev:
    name: 🚀 部署到开发环境
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🔧 设置kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: 🚀 部署到开发环境
      run: |
        echo "🚀 部署到开发环境..."
        # 这里添加实际的部署命令
        # kubectl apply -f k8s/development/
        echo "✅ 开发环境部署完成"

    - name: 🧪 部署后测试
      run: |
        echo "🧪 运行部署后测试..."
        # 添加健康检查和烟雾测试
        sleep 30
        # curl -f https://dev.your-domain.com/api/info
        echo "✅ 部署后测试通过"

  # 部署到生产环境
  deploy-prod:
    name: 🏭 部署到生产环境
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.event_name == 'release'
    environment: production

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🔧 设置kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: 🚀 部署到生产环境
      run: |
        echo "🚀 部署到生产环境..."
        # kubectl apply -f k8s/production/
        echo "✅ 生产环境部署完成"

    - name: 🧪 生产环境验证
      run: |
        echo "🧪 验证生产环境..."
        sleep 60
        # curl -f https://your-domain.com/api/info
        echo "✅ 生产环境验证通过"

    - name: 📢 发送部署通知
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: '🎉 生产环境部署成功！版本: ${{ github.event.release.tag_name }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()

  # 性能测试
  performance:
    name: ⚡ 性能测试
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🔧 设置Node.js (用于Artillery)
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 📦 安装Artillery
      run: npm install -g artillery@latest

    - name: ⚡ 运行性能测试
      run: |
        echo "⚡ 运行性能测试..."
        # artillery run performance-tests/load-test.yml
        echo "✅ 性能测试完成"

    - name: 📊 生成性能报告
      run: |
        echo "📊 生成性能报告..."
        # artillery report --output performance-report.html
        echo "✅ 性能报告生成完成"

  # 清理任务
  cleanup:
    name: 🧹 清理资源
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()

    steps:
    - name: 🧹 清理旧镜像
      run: |
        echo "🧹 清理旧的Docker镜像..."
        # 保留最近10个版本的镜像
        echo "✅ 清理完成"

    - name: 📝 更新部署文档
      run: |
        echo "📝 更新部署文档..."
        echo "部署时间: $(date)" >> DEPLOYMENT_LOG.md
        echo "版本: ${{ github.sha }}" >> DEPLOYMENT_LOG.md
        echo "✅ 文档更新完成"