name: Security Scan - 安全扫描

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 每周一凌晨3点运行安全扫描
    - cron: '0 3 * * 1'

jobs:
  # 代码安全扫描
  code-security:
    name: 🔒 代码安全扫描
    runs-on: ubuntu-latest

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🐍 设置Python环境
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 安装安全工具
      run: |
        pip install bandit safety semgrep

    - name: 🔍 Bandit安全扫描
      run: |
        bandit -r src/ -f json -o bandit-security-report.json
        bandit -r src/ -f txt -o bandit-security-report.txt

    - name: 🔐 依赖漏洞扫描 (Safety)
      run: |
        pip install -r requirements-docker.txt
        safety check --json --output safety-vulnerabilities.json

    - name: 🛡️ Semgrep代码扫描
      run: |
        semgrep --config=auto src/ --json --output=semgrep-results.json

    - name: 📊 上传安全报告到GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep-results.json

    - name: 📋 上传安全扫描结果
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-security-report.json
          bandit-security-report.txt
          safety-vulnerabilities.json
          semgrep-results.json

  # Docker镜像安全扫描
  container-security:
    name: 🐳 容器安全扫描
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🔧 设置Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ 构建Docker镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        tags: analysis-report-system:security-scan
        load: true

    - name: 🔍 Trivy漏洞扫描
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'analysis-report-system:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 上传Trivy结果到GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🔍 Snyk容器扫描
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: analysis-report-system:security-scan
        args: --file=Dockerfile --severity-threshold=high
      continue-on-error: true

    - name: 📋 上传Snyk结果
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: snyk.sarif

  # 密钥泄露检查
  secret-scan:
    name: 🔑 密钥泄露检查
    runs-on: ubuntu-latest

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔍 GitLeaks密钥扫描
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

    - name: 🔎 TruffleHog密钥扫描
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # 许可证合规检查
  license-compliance:
    name: 📜 许可证合规检查
    runs-on: ubuntu-latest

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🐍 设置Python环境
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'

    - name: 📦 安装依赖
      run: |
        pip install -r requirements-docker.txt
        pip install pip-licenses licensecheck

    - name: 📜 检查Python包许可证
      run: |
        pip-licenses --format json --output-file python-licenses.json
        pip-licenses --format csv --output-file python-licenses.csv

    - name: 🔍 许可证兼容性检查
      run: |
        licensecheck --zero --ignore 'venv/**' --ignore '.git/**' . > license-check-results.txt

    - name: 📋 上传许可证报告
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          python-licenses.json
          python-licenses.csv
          license-check-results.txt

  # OWASP依赖检查
  owasp-dependency-check:
    name: 🛡️ OWASP依赖检查
    runs-on: ubuntu-latest

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🔍 OWASP依赖检查
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'analysis-report-system'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7

    - name: 📊 上传OWASP报告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: owasp-reports
        path: reports/

  # 安全配置检查
  security-config:
    name: ⚙️ 安全配置检查
    runs-on: ubuntu-latest

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🔍 检查敏感文件
      run: |
        echo "🔍 检查是否存在敏感文件..."
        
        # 检查是否有硬编码的密钥
        if grep -r "password\|secret\|key\|token" --include="*.py" --include="*.yml" --include="*.yaml" src/; then
          echo "⚠️ 发现可能的硬编码密钥"
        fi
        
        # 检查Docker配置安全性
        if [ -f "Dockerfile" ]; then
          echo "🐳 检查Dockerfile安全配置..."
          if grep -q "USER root" Dockerfile; then
            echo "⚠️ Dockerfile使用root用户运行"
          fi
        fi
        
        # 检查是否有调试信息泄露
        if grep -r "DEBUG.*=.*True" --include="*.py" src/; then
          echo "⚠️ 发现Debug模式开启"
        fi

    - name: 📋 生成安全配置报告
      run: |
        echo "# 安全配置检查报告" > security-config-report.md
        echo "生成时间: $(date)" >> security-config-report.md
        echo "" >> security-config-report.md
        echo "## 检查项目" >> security-config-report.md
        echo "- [x] 敏感文件检查" >> security-config-report.md
        echo "- [x] Docker安全配置" >> security-config-report.md
        echo "- [x] 调试信息泄露检查" >> security-config-report.md

    - name: 📋 上传配置检查报告
      uses: actions/upload-artifact@v3
      with:
        name: security-config-report
        path: security-config-report.md

  # 综合安全报告
  security-summary:
    name: 📊 安全扫描汇总
    runs-on: ubuntu-latest
    needs: [code-security, container-security, secret-scan, license-compliance, owasp-dependency-check, security-config]
    if: always()

    steps:
    - name: 📥 下载所有安全报告
      uses: actions/download-artifact@v3

    - name: 📊 生成综合安全报告
      run: |
        echo "# 🔒 安全扫描综合报告" > SECURITY_REPORT.md
        echo "" >> SECURITY_REPORT.md
        echo "**扫描时间**: $(date)" >> SECURITY_REPORT.md
        echo "**提交**: ${{ github.sha }}" >> SECURITY_REPORT.md
        echo "**分支**: ${{ github.ref_name }}" >> SECURITY_REPORT.md
        echo "" >> SECURITY_REPORT.md
        
        echo "## 📋 扫描结果摘要" >> SECURITY_REPORT.md
        echo "" >> SECURITY_REPORT.md
        echo "| 扫描类型 | 状态 | 说明 |" >> SECURITY_REPORT.md
        echo "|---------|------|------|" >> SECURITY_REPORT.md
        echo "| 🔍 代码安全扫描 | ${{ needs.code-security.result == 'success' && '✅ 通过' || '❌ 失败' }} | Bandit + Safety + Semgrep |" >> SECURITY_REPORT.md
        echo "| 🐳 容器安全扫描 | ${{ needs.container-security.result == 'success' && '✅ 通过' || '❌ 失败' }} | Trivy + Snyk |" >> SECURITY_REPORT.md
        echo "| 🔑 密钥泄露检查 | ${{ needs.secret-scan.result == 'success' && '✅ 通过' || '❌ 失败' }} | GitLeaks + TruffleHog |" >> SECURITY_REPORT.md
        echo "| 📜 许可证合规 | ${{ needs.license-compliance.result == 'success' && '✅ 通过' || '❌ 失败' }} | 许可证兼容性检查 |" >> SECURITY_REPORT.md
        echo "| 🛡️ OWASP依赖检查 | ${{ needs.owasp-dependency-check.result == 'success' && '✅ 通过' || '❌ 失败' }} | 已知漏洞数据库 |" >> SECURITY_REPORT.md
        echo "| ⚙️ 安全配置检查 | ${{ needs.security-config.result == 'success' && '✅ 通过' || '❌ 失败' }} | 配置安全性检查 |" >> SECURITY_REPORT.md
        
        echo "" >> SECURITY_REPORT.md
        echo "## 📝 详细报告" >> SECURITY_REPORT.md
        echo "详细的扫描结果请查看各个步骤的Artifacts。" >> SECURITY_REPORT.md

    - name: 📋 上传综合安全报告
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-security-report
        path: SECURITY_REPORT.md

    - name: 📢 安全扫描通知
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#security'
        text: '🚨 安全扫描发现问题！请及时处理。'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}